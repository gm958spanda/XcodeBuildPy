# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.9pre on Wed Oct 23 17:45:09 2019
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import time
import os
import thread

from GConfig import gConfig
from pyzlt import XcodeBuild

class buildLibDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # self.p_printCount = 0
        # self.p_lastPrintTime = 0

        # begin wxGlade: buildLibDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")
        
        sizer_1 = wx.FlexGridSizer(3, 1, 10, 2)
        
        grid_sizer_1 = wx.FlexGridSizer(3, 3, 10, 3)
        sizer_1.Add(grid_sizer_1, 10, wx.EXPAND, 0)
        
        static_text_1 = wx.StaticText(self, wx.ID_ANY, u"工程路径")
        grid_sizer_1.Add(static_text_1, 0, 0, 0)
        
        self.inputWorkProjectPathTextView = wx.TextCtrl(self, wx.ID_ANY, "")
        self.inputWorkProjectPathTextView.SetMinSize((600, 22))
        grid_sizer_1.Add(self.inputWorkProjectPathTextView, 0, 0, 0)
        
        self.workProjectPathButton = wx.Button(self, wx.ID_ANY, u"选择路径")
        grid_sizer_1.Add(self.workProjectPathButton, 0, 0, 0)
        
        static_text_2 = wx.StaticText(self, wx.ID_ANY, u"输出路径")
        grid_sizer_1.Add(static_text_2, 0, 0, 0)
        
        self.outputLibPathTextView = wx.TextCtrl(self, wx.ID_ANY, "")
        self.outputLibPathTextView.SetMinSize((600, 22))
        grid_sizer_1.Add(self.outputLibPathTextView, 0, 0, 0)
        
        self.outputLibPathButton = wx.Button(self, wx.ID_ANY, u"选择路径")
        grid_sizer_1.Add(self.outputLibPathButton, 0, 0, 0)
        
        static_text_3 = wx.StaticText(self, wx.ID_ANY, u"输出路径")
        grid_sizer_1.Add(static_text_3, 0, 0, 0)
        
        self.outputLibPathTextView_copy = wx.TextCtrl(self, wx.ID_ANY, "")
        self.outputLibPathTextView_copy.SetMinSize((600, 22))
        grid_sizer_1.Add(self.outputLibPathTextView_copy, 0, 0, 0)
        
        self.outputLibPathButton_copy = wx.Button(self, wx.ID_ANY, u"选择路径")
        grid_sizer_1.Add(self.outputLibPathButton_copy, 0, 0, 0)
        
        sizer_2 = wx.GridSizer(1, 1, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        
        self.buildButton = wx.Button(self, wx.ID_ANY, u"构建")
        sizer_2.Add(self.buildButton, 0, wx.ALIGN_CENTER, 0)
        
        grid_sizer_3 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        
        self.printTextView = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_MULTILINE | wx.TE_NOHIDESEL | wx.TE_READONLY)
        self.printTextView.SetMinSize((750, 300))
        grid_sizer_3.Add(self.printTextView, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        
        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.onClickLibPathButton, self.workProjectPathButton)
        self.Bind(wx.EVT_BUTTON, self.onClickOutputLibPathButton, self.outputLibPathButton)
        self.Bind(wx.EVT_BUTTON, self.onClickOutputLibPathButton, self.outputLibPathButton_copy)
        self.Bind(wx.EVT_BUTTON, self.onClickBuildButton, self.buildButton)
        # end wxGlade

        self.inputWorkProjectPathTextView.SetValue(gConfig.buildLibInputPath)
        self.outputLibPathTextView.SetValue(gConfig.buildLibOutputPath)

    def onClickLibPathButton(self, event):  # wxGlade: buildLibDialog.<event_handler>
        picker = wx.FileDialog(self)
        picker.SetPath(gConfig.buildLibInputPath)
        if picker.ShowModal() != wx.ID_CANCEL :
            path = picker.GetPath()
            gConfig.buildLibInputPath = path
            self.inputWorkProjectPathTextView.SetValue(path)
        event.Skip()

    def onClickOutputLibPathButton(self, event):  # wxGlade: buildLibDialog.<event_handler>
        picker = wx.DirDialog(self)
        picker.SetPath(gConfig.buildLibOutputPath)
        if picker.ShowModal() != wx.ID_CANCEL :
            path = picker.GetPath()
            gConfig.buildLibOutputPath = path
            self.outputLibPathTextView.SetValue(path)
        event.Skip()

    
    def onClickBuildButton(self, event):  # wxGlade: buildLibDialog.<event_handler>
        self.printTextView.Value = ""
        if self.outputLibPathTextView.Value.lower().startswith(self.inputWorkProjectPathTextView.Value.lower()):
            self.infoPrint("输出路径不能等于lib库路径，或是其子目录")
            return
        
        def start():
            self.infoPrint("开始构建")
            task = XcodeBuild()
            task.infoPrint = self.infoPrint
            task.errorPrint = self.errorPrint
            # task.continueOrCancelAsk = self.continueOrCancelAsk

            task.WorkSpacePath = self.inputWorkProjectPathTextView.Value.encode('utf-8')
            task.BuildOutPutPath = self.outputLibPathTextView.Value.encode('utf-8')
            task.Scheme = 'FireflyMiniapp'
            task.func_build_iphonesimulator()
            self.infoPrint("结束构建")

        thread.start_new_thread(start, () )
        event.Skip()
    

    def infoPrint(self,info):
        wx.CallAfter(self.__infoPrint,info)

        # ns = time.time()
        # if self.p_lastPrintTime == 0 :
        #     self.p_printCount = 0
        # elif (ns - self.p_lastPrintTime) <= 0.001: #1毫秒
        #     self.p_printCount += 1

        # if self.p_printCount > 3 :
        #     time.sleep(0.1) #睡眠100毫秒
        #     self.p_printCount = 0
        # self.p_lastPrintTime = ns
        
    def __infoPrint(self,info):
        self.printTextView.AppendText(info + "\n")

    def errorPrint(self,error):
        wx.CallAfter(self.__errorPrint,error)

    def __errorPrint(self,error):
        self.printTextView.AppendText(error + "\n")
# end of class buildLibDialog
